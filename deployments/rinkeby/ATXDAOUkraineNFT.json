{
  "address": "0x99390BE7cf40225ECEB7167CA9E3746eCf6D7e6e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_priceTiers",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recip",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tier",
          "type": "uint256"
        }
      ],
      "name": "UkraineNFTMinted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_tokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recip",
          "type": "address"
        }
      ],
      "name": "addRecip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tiers",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMintable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recip",
          "type": "address"
        }
      ],
      "name": "isRecip",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recip",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "priceTiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "recips",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_priceTiers",
          "type": "uint256[]"
        }
      ],
      "name": "setTiers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "startMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tierMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recip",
          "type": "address"
        }
      ],
      "name": "totalDonated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "valueMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x58093516fd220e547f144fad0c4c88404f3a8151e0c00f472530de4f74a2713a",
  "receipt": {
    "to": null,
    "from": "0x51040CE6FC9b9C5Da69B044109f637dc997e92DE",
    "contractAddress": "0x99390BE7cf40225ECEB7167CA9E3746eCf6D7e6e",
    "transactionIndex": 25,
    "gasUsed": "2374500",
    "logsBloom": "0x
    "blockHash": "0x94a1136a65d4cb3db5c1da52c041486ddb2108f43d30e039c7a188a2ae820c01",
    "transactionHash": "0x58093516fd220e547f144fad0c4c88404f3a8151e0c00f472530de4f74a2713a",
    "logs": [
      {
        "transactionIndex": 25,
        "blockNumber": 10286056,
        "transactionHash": "0x58093516fd220e547f144fad0c4c88404f3a8151e0c00f472530de4f74a2713a",
        "address": "0x99390BE7cf40225ECEB7167CA9E3746eCf6D7e6e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000051040ce6fc9b9c5da69b044109f637dc997e92de"
        ],
        "data": "0x",
        "logIndex": 30,
        "blockHash": "0x94a1136a65d4cb3db5c1da52c041486ddb2108f43d30e039c7a188a2ae820c01"
      }
    ],
    "blockNumber": 10286056,
    "cumulativeGasUsed": "14951997",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "51200000000000000",
      "512000000000000000",
      "5120000000000000000"
    ],
    "0x165CD37b4C644C2921454429E7F9358d18A45e14"
  ],
  "numDeployments": 1,
  "solcInputHash": "4e24aee643e22363fad926bd1e69726e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_priceTiers\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recip\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"UkraineNFTMinted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recip\",\"type\":\"address\"}],\"name\":\"addRecip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tiers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMintable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recip\",\"type\":\"address\"}],\"name\":\"isRecip\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recip\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"recips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_priceTiers\",\"type\":\"uint256[]\"}],\"name\":\"setTiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"startMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recip\",\"type\":\"address\"}],\"name\":\"totalDonated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"valueMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ATXDAOUkraineNFT.sol\":\"ATXDAOUkraineNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cbe42915bc66227970fe99bc0f783eb1de30f2b48f984af01ad45edb9658698\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ATXDAOUkraineNFT.sol\":{\"content\":\"/*\\n  /$$$$$$  /$$$$$$$$ /$$   /$$ /$$$$$$$   /$$$$$$   /$$$$$$\\n /$$__  $$|__  $$__/| $$  / $$| $$__  $$ /$$__  $$ /$$__  $$\\n| $$  \\\\ $$   | $$   |  $$/ $$/| $$  \\\\ $$| $$  \\\\ $$| $$  \\\\ $$\\n| $$$$$$$$   | $$    \\\\  $$$$/ | $$  | $$| $$$$$$$$| $$  | $$\\n| $$__  $$   | $$     >$$  $$ | $$  | $$| $$__  $$| $$  | $$\\n| $$  | $$   | $$    /$$/\\\\  $$| $$  | $$| $$  | $$| $$  | $$\\n| $$  | $$   | $$   | $$  \\\\ $$| $$$$$$$/| $$  | $$|  $$$$$$/\\n|__/  |__/   |__/   |__/  |__/|_______/ |__/  |__/ \\\\______/\\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\n\\ncontract ATXDAOUkraineNFT is ERC721URIStorage, Ownable {\\n    using Strings for uint256;\\n\\n    bool public isMintable = false;\\n\\n    uint256 public _tokenId = 0;\\n\\n    uint256[] public priceTiers;\\n\\n    string private baseURI;\\n\\n    mapping(uint256 => uint256) public tierMap;\\n    mapping(uint256 => uint256) public valueMap;\\n\\n    mapping(address => uint256) public recips;\\n\\n    event UkraineNFTMinted(\\n        address minter,\\n        address recip,\\n        uint256 value,\\n        uint256 tier\\n    );\\n\\n    constructor(uint256[] memory _priceTiers, address _to)\\n        ERC721(\\\"ATX <3 UKR\\\", \\\"<3UKR\\\")\\n    {\\n        setTiers(_priceTiers);\\n        addRecip(_to);\\n    }\\n\\n    function setTiers(uint256[] memory _priceTiers) public onlyOwner {\\n        require(_priceTiers.length > 0, \\\"must be at least 1 price tier\\\");\\n        priceTiers = new uint256[](_priceTiers.length);\\n        priceTiers[0] = _priceTiers[0];\\n        for (uint256 i = 1; i < _priceTiers.length; ++i) {\\n            require(\\n                _priceTiers[i] > _priceTiers[i - 1],\\n                \\\"price tiers not ascending!\\\"\\n            );\\n            priceTiers[i] = _priceTiers[i];\\n        }\\n    }\\n\\n    function getTier(uint256 value) internal view returns (uint256) {\\n        require(value >= priceTiers[0], \\\"value smaller than lowest tier!\\\");\\n        uint256 tier = 0;\\n        for (uint256 i = 0; i < priceTiers.length; ++i) {\\n            if (value < priceTiers[i]) {\\n                break;\\n            }\\n            tier = i;\\n        }\\n        return tier;\\n    }\\n\\n    // Normal mint\\n    function mint(address recip) external payable {\\n        require(isMintable == true, \\\"minting not started!\\\");\\n        require(isRecip(recip), \\\"recipient not whitelisted!\\\");\\n        // returns a tier or throws an error if value too small\\n        uint256 tier = getTier(msg.value);\\n\\n        _tokenId += 1;\\n        _safeMint(msg.sender, _tokenId);\\n        _setTokenURI(\\n            _tokenId,\\n            string(abi.encodePacked(baseURI, tier.toString(), \\\".json\\\"))\\n        );\\n        payable(recip).transfer(msg.value);\\n        tierMap[_tokenId] = tier;\\n        valueMap[_tokenId] = msg.value;\\n        recips[recip] += msg.value;\\n        emit UkraineNFTMinted(msg.sender, recip, msg.value, tier);\\n    }\\n\\n    function totalDonated(address recip) public view returns (uint256) {\\n        require(isRecip(recip), \\\"invalid recipient!\\\");\\n        return recips[recip] - 1;\\n    }\\n\\n    function addRecip(address recip) public onlyOwner {\\n        recips[recip] = 1;\\n    }\\n\\n    function isRecip(address recip) public view returns (bool) {\\n        return recips[recip] > 0;\\n    }\\n\\n    function startMint(string memory tokenURI) public onlyOwner {\\n        baseURI = tokenURI;\\n        isMintable = true;\\n    }\\n\\n    function endMint() public onlyOwner {\\n        isMintable = false;\\n    }\\n\\n    function getOwners()\\n        public\\n        view\\n        returns (\\n            address[] memory owners,\\n            uint256[] memory tiers,\\n            uint256[] memory values\\n        )\\n    {\\n        owners = new address[](_tokenId);\\n        tiers = new uint256[](_tokenId);\\n        values = new uint256[](_tokenId);\\n        for (uint256 i = 0; i < _tokenId; ++i) {\\n            owners[i] = ownerOf(i + 1);\\n            tiers[i] = tierMap[i + 1];\\n            values[i] = valueMap[i + 1];\\n        }\\n        return (owners, tiers, values);\\n    }\\n}\\n\",\"keccak256\":\"0x8ddb2bfe1a058afb1c7d007d10efa8278030ad78008ca97d623f90310879f15e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526007805460ff60a01b1916905560006008553480156200002357600080fd5b5060405162002ccb38038062002ccb8339810160408190526200004691620004f3565b604080518082018252600a81526920aa2c101e19902aa5a960b11b6020808301918252835180850190945260058452641e19aaa5a960d91b9084015281519192916200009591600091620003dd565b508051620000ab906001906020840190620003dd565b505050620000c8620000c2620000e660201b60201c565b620000ea565b620000d3826200013c565b620000de8162000375565b505062000671565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6007546001600160a01b031633146200018b5760405162461bcd60e51b8152602060048201819052602482015260008051602062002cab83398151915260448201526064015b60405180910390fd5b6000815111620001de5760405162461bcd60e51b815260206004820152601d60248201527f6d757374206265206174206c6561737420312070726963652074696572000000604482015260640162000182565b80516001600160401b03811115620001fa57620001fa620004c0565b60405190808252806020026020018201604052801562000224578160200160208202803683370190505b5080516200023b916009916020909101906200046c565b5080600081518110620002525762000252620005d0565b60200260200101516009600081548110620002715762000271620005d0565b60009182526020909120015560015b815181101562000371578162000298600183620005fc565b81518110620002ab57620002ab620005d0565b6020026020010151828281518110620002c857620002c8620005d0565b6020026020010151116200031f5760405162461bcd60e51b815260206004820152601a60248201527f7072696365207469657273206e6f7420617363656e64696e6721000000000000604482015260640162000182565b818181518110620003345762000334620005d0565b602002602001015160098281548110620003525762000352620005d0565b600091825260209091200155620003698162000616565b905062000280565b5050565b6007546001600160a01b03163314620003c05760405162461bcd60e51b8152602060048201819052602482015260008051602062002cab833981519152604482015260640162000182565b6001600160a01b03166000908152600d6020526040902060019055565b828054620003eb9062000634565b90600052602060002090601f0160209004810192826200040f57600085556200045a565b82601f106200042a57805160ff19168380011785556200045a565b828001600101855582156200045a579182015b828111156200045a5782518255916020019190600101906200043d565b5062000468929150620004a9565b5090565b8280548282559060005260206000209081019282156200045a57916020028201828111156200045a5782518255916020019190600101906200043d565b5b80821115620004685760008155600101620004aa565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620004ee57600080fd5b919050565b600080604083850312156200050757600080fd5b82516001600160401b03808211156200051f57600080fd5b818501915085601f8301126200053457600080fd5b81516020828211156200054b576200054b620004c0565b8160051b604051601f19603f83011681018181108682111715620005735762000573620004c0565b6040529283528183019350848101820192898411156200059257600080fd5b948201945b83861015620005b25785518552948201949382019362000597565b9650620005c39050878201620004d6565b9450505050509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015620006115762000611620005e6565b500390565b60006000198214156200062d576200062d620005e6565b5060010190565b600181811c908216806200064957607f821691505b602082108114156200066b57634e487b7160e01b600052602260045260246000fd5b50919050565b61262a80620006816000396000f3fe6080604052600436106101cd5760003560e01c806370a08231116100f7578063a22cb46511610095578063daae8ba211610064578063daae8ba214610541578063dfcdeb7f1461056e578063e985e9c51461059b578063f2fde38b146105e457600080fd5b8063a22cb465146104a9578063b88d4fde146104c9578063bc0ddf47146104e9578063c87b56dd1461052157600080fd5b80638da5cb5b116100d15780638da5cb5b1461043257806390dcbeff1461045057806395d89b4114610470578063a0e67e2b1461048557600080fd5b806370a08231146103dd578063715018a6146103fd57806382b670e41461041257600080fd5b8063248225141161016f57806349db9be11161013e57806349db9be11461035d5780636352211e1461038a578063639d6923146103aa5780636a627842146103ca57600080fd5b806324822514146102e657806339daaee8146102fc57806342842e0e1461031c57806346b45af71461033c57600080fd5b8063081812fc116101ab578063081812fc14610240578063095ea7b3146102785780630f3a1d471461029857806323b872dd146102c657600080fd5b8063017043a5146101d257806301ffc9a7146101e957806306fdde031461021e575b600080fd5b3480156101de57600080fd5b506101e7610604565b005b3480156101f557600080fd5b50610209610204366004611e70565b610646565b60405190151581526020015b60405180910390f35b34801561022a57600080fd5b50610233610698565b6040516102159190611ee5565b34801561024c57600080fd5b5061026061025b366004611ef8565b61072a565b6040516001600160a01b039091168152602001610215565b34801561028457600080fd5b506101e7610293366004611f2d565b6107b2565b3480156102a457600080fd5b506102b86102b3366004611f57565b6108c8565b604051908152602001610215565b3480156102d257600080fd5b506101e76102e1366004611f72565b610947565b3480156102f257600080fd5b506102b860085481565b34801561030857600080fd5b506101e7610317366004611f57565b610978565b34801561032857600080fd5b506101e7610337366004611f72565b6109bf565b34801561034857600080fd5b5060075461020990600160a01b900460ff1681565b34801561036957600080fd5b506102b8610378366004611f57565b600d6020526000908152604090205481565b34801561039657600080fd5b506102606103a5366004611ef8565b6109da565b3480156103b657600080fd5b506101e76103c536600461204d565b610a51565b6101e76103d8366004611f57565b610aa5565b3480156103e957600080fd5b506102b86103f8366004611f57565b610ca1565b34801561040957600080fd5b506101e7610d28565b34801561041e57600080fd5b506101e761042d366004612096565b610d5e565b34801561043e57600080fd5b506007546001600160a01b0316610260565b34801561045c57600080fd5b506102b861046b366004611ef8565b610f51565b34801561047c57600080fd5b50610233610f72565b34801561049157600080fd5b5061049a610f81565b60405161021593929190612177565b3480156104b557600080fd5b506101e76104c43660046121ec565b61112c565b3480156104d557600080fd5b506101e76104e4366004612228565b611137565b3480156104f557600080fd5b50610209610504366004611f57565b6001600160a01b03166000908152600d6020526040902054151590565b34801561052d57600080fd5b5061023361053c366004611ef8565b61116f565b34801561054d57600080fd5b506102b861055c366004611ef8565b600c6020526000908152604090205481565b34801561057a57600080fd5b506102b8610589366004611ef8565b600b6020526000908152604090205481565b3480156105a757600080fd5b506102096105b63660046122a4565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156105f057600080fd5b506101e76105ff366004611f57565b6112e6565b6007546001600160a01b031633146106375760405162461bcd60e51b815260040161062e906122d7565b60405180910390fd5b6007805460ff60a01b19169055565b60006001600160e01b031982166380ac58cd60e01b148061067757506001600160e01b03198216635b5e139f60e01b145b8061069257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546106a79061230c565b80601f01602080910402602001604051908101604052809291908181526020018280546106d39061230c565b80156107205780601f106106f557610100808354040283529160200191610720565b820191906000526020600020905b81548152906001019060200180831161070357829003601f168201915b5050505050905090565b600061073582611381565b6107965760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161062e565b506000908152600460205260409020546001600160a01b031690565b60006107bd826109da565b9050806001600160a01b0316836001600160a01b0316141561082b5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161062e565b336001600160a01b0382161480610847575061084781336105b6565b6108b95760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161062e565b6108c3838361139e565b505050565b6001600160a01b0381166000908152600d60205260408120546109225760405162461bcd60e51b8152602060048201526012602482015271696e76616c696420726563697069656e742160701b604482015260640161062e565b6001600160a01b0382166000908152600d60205260409020546106929060019061235d565b610951338261140c565b61096d5760405162461bcd60e51b815260040161062e90612374565b6108c38383836114f2565b6007546001600160a01b031633146109a25760405162461bcd60e51b815260040161062e906122d7565b6001600160a01b03166000908152600d6020526040902060019055565b6108c383838360405180602001604052806000815250611137565b6000818152600260205260408120546001600160a01b0316806106925760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161062e565b6007546001600160a01b03163314610a7b5760405162461bcd60e51b815260040161062e906122d7565b8051610a8e90600a906020840190611d87565b50506007805460ff60a01b1916600160a01b179055565b600754600160a01b900460ff161515600114610afa5760405162461bcd60e51b81526020600482015260146024820152736d696e74696e67206e6f7420737461727465642160601b604482015260640161062e565b6001600160a01b0381166000908152600d6020526040902054610b5f5760405162461bcd60e51b815260206004820152601a60248201527f726563697069656e74206e6f742077686974656c697374656421000000000000604482015260640161062e565b6000610b6a34611692565b9050600160086000828254610b7f91906123c5565b92505081905550610b9233600854611754565b610bc8600854600a610ba38461176e565b604051602001610bb49291906123f9565b60405160208183030381529060405261186c565b6040516001600160a01b038316903480156108fc02916000818181858888f19350505050158015610bfd573d6000803e3d6000fd5b50600880546000908152600b6020908152604080832085905592548252600c815282822034908190556001600160a01b0386168352600d9091529181208054909190610c4a9084906123c5565b9091555050604080513381526001600160a01b038416602082015234818301526060810183905290517f246d6bee23a8a0c8daf1c72f7696c774498350e7cd91d73644c79f613b1870da9181900360800190a15050565b60006001600160a01b038216610d0c5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161062e565b506001600160a01b031660009081526003602052604090205490565b6007546001600160a01b03163314610d525760405162461bcd60e51b815260040161062e906122d7565b610d5c60006118f7565b565b6007546001600160a01b03163314610d885760405162461bcd60e51b815260040161062e906122d7565b6000815111610dd95760405162461bcd60e51b815260206004820152601d60248201527f6d757374206265206174206c6561737420312070726963652074696572000000604482015260640161062e565b805167ffffffffffffffff811115610df357610df3611fae565b604051908082528060200260200182016040528015610e1c578160200160208202803683370190505b508051610e3191600991602090910190611e0b565b5080600081518110610e4557610e456124b4565b60200260200101516009600081548110610e6157610e616124b4565b60009182526020909120015560015b8151811015610f4d5781610e8560018361235d565b81518110610e9557610e956124b4565b6020026020010151828281518110610eaf57610eaf6124b4565b602002602001015111610f045760405162461bcd60e51b815260206004820152601a60248201527f7072696365207469657273206e6f7420617363656e64696e6721000000000000604482015260640161062e565b818181518110610f1657610f166124b4565b602002602001015160098281548110610f3157610f316124b4565b600091825260209091200155610f46816124ca565b9050610e70565b5050565b60098181548110610f6157600080fd5b600091825260209091200154905081565b6060600180546106a79061230c565b606080606060085467ffffffffffffffff811115610fa157610fa1611fae565b604051908082528060200260200182016040528015610fca578160200160208202803683370190505b50925060085467ffffffffffffffff811115610fe857610fe8611fae565b604051908082528060200260200182016040528015611011578160200160208202803683370190505b50915060085467ffffffffffffffff81111561102f5761102f611fae565b604051908082528060200260200182016040528015611058578160200160208202803683370190505b50905060005b600854811015611126576110766103a58260016123c5565b848281518110611088576110886124b4565b6001600160a01b0390921660209283029190910190910152600b60006110af8360016123c5565b8152602001908152602001600020548382815181106110d0576110d06124b4565b6020908102919091010152600c60006110ea8360016123c5565b81526020019081526020016000205482828151811061110b5761110b6124b4565b602090810291909101015261111f816124ca565b905061105e565b50909192565b610f4d338383611949565b611141338361140c565b61115d5760405162461bcd60e51b815260040161062e90612374565b61116984848484611a18565b50505050565b606061117a82611381565b6111e05760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b606482015260840161062e565b600082815260066020526040812080546111f99061230c565b80601f01602080910402602001604051908101604052809291908181526020018280546112259061230c565b80156112725780601f1061124757610100808354040283529160200191611272565b820191906000526020600020905b81548152906001019060200180831161125557829003601f168201915b50505050509050600061129060408051602081019091526000815290565b90508051600014156112a3575092915050565b8151156112d55780826040516020016112bd9291906124e5565b60405160208183030381529060405292505050919050565b6112de84611a4b565b949350505050565b6007546001600160a01b031633146113105760405162461bcd60e51b815260040161062e906122d7565b6001600160a01b0381166113755760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161062e565b61137e816118f7565b50565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906113d3826109da565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061141782611381565b6114785760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161062e565b6000611483836109da565b9050806001600160a01b0316846001600160a01b031614806114be5750836001600160a01b03166114b38461072a565b6001600160a01b0316145b806112de57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff166112de565b826001600160a01b0316611505826109da565b6001600160a01b03161461156d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161062e565b6001600160a01b0382166115cf5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161062e565b6115da60008261139e565b6001600160a01b038316600090815260036020526040812080546001929061160390849061235d565b90915550506001600160a01b03821660009081526003602052604081208054600192906116319084906123c5565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600060096000815481106116a8576116a86124b4565b90600052602060002001548210156117025760405162461bcd60e51b815260206004820152601f60248201527f76616c756520736d616c6c6572207468616e206c6f7765737420746965722100604482015260640161062e565b6000805b60095481101561174d5760098181548110611723576117236124b4565b906000526020600020015484101561173a5761174d565b905080611746816124ca565b9050611706565b5092915050565b610f4d828260405180602001604052806000815250611b23565b6060816117925750506040805180820190915260018152600360fc1b602082015290565b8160005b81156117bc57806117a6816124ca565b91506117b59050600a8361252a565b9150611796565b60008167ffffffffffffffff8111156117d7576117d7611fae565b6040519080825280601f01601f191660200182016040528015611801576020820181803683370190505b5090505b84156112de5761181660018361235d565b9150611823600a8661253e565b61182e9060306123c5565b60f81b818381518110611843576118436124b4565b60200101906001600160f81b031916908160001a905350611865600a8661252a565b9450611805565b61187582611381565b6118d85760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b606482015260840161062e565b600082815260066020908152604090912082516108c392840190611d87565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156119ab5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161062e565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611a238484846114f2565b611a2f84848484611b56565b6111695760405162461bcd60e51b815260040161062e90612552565b6060611a5682611381565b611aba5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161062e565b6000611ad160408051602081019091526000815290565b90506000815111611af15760405180602001604052806000815250611b1c565b80611afb8461176e565b604051602001611b0c9291906124e5565b6040516020818303038152906040525b9392505050565b611b2d8383611c54565b611b3a6000848484611b56565b6108c35760405162461bcd60e51b815260040161062e90612552565b60006001600160a01b0384163b15611c4957604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611b9a9033908990889088906004016125a4565b6020604051808303816000875af1925050508015611bd5575060408051601f3d908101601f19168201909252611bd2918101906125d7565b60015b611c2f573d808015611c03576040519150601f19603f3d011682016040523d82523d6000602084013e611c08565b606091505b508051611c275760405162461bcd60e51b815260040161062e90612552565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506112de565b506001949350505050565b6001600160a01b038216611caa5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161062e565b611cb381611381565b15611d005760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161062e565b6001600160a01b0382166000908152600360205260408120805460019290611d299084906123c5565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054611d939061230c565b90600052602060002090601f016020900481019282611db55760008555611dfb565b82601f10611dce57805160ff1916838001178555611dfb565b82800160010185558215611dfb579182015b82811115611dfb578251825591602001919060010190611de0565b50611e07929150611e45565b5090565b828054828255906000526020600020908101928215611dfb5791602002820182811115611dfb578251825591602001919060010190611de0565b5b80821115611e075760008155600101611e46565b6001600160e01b03198116811461137e57600080fd5b600060208284031215611e8257600080fd5b8135611b1c81611e5a565b60005b83811015611ea8578181015183820152602001611e90565b838111156111695750506000910152565b60008151808452611ed1816020860160208601611e8d565b601f01601f19169290920160200192915050565b602081526000611b1c6020830184611eb9565b600060208284031215611f0a57600080fd5b5035919050565b80356001600160a01b0381168114611f2857600080fd5b919050565b60008060408385031215611f4057600080fd5b611f4983611f11565b946020939093013593505050565b600060208284031215611f6957600080fd5b611b1c82611f11565b600080600060608486031215611f8757600080fd5b611f9084611f11565b9250611f9e60208501611f11565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611fed57611fed611fae565b604052919050565b600067ffffffffffffffff83111561200f5761200f611fae565b612022601f8401601f1916602001611fc4565b905082815283838301111561203657600080fd5b828260208301376000602084830101529392505050565b60006020828403121561205f57600080fd5b813567ffffffffffffffff81111561207657600080fd5b8201601f8101841361208757600080fd5b6112de84823560208401611ff5565b600060208083850312156120a957600080fd5b823567ffffffffffffffff808211156120c157600080fd5b818501915085601f8301126120d557600080fd5b8135818111156120e7576120e7611fae565b8060051b91506120f8848301611fc4565b818152918301840191848101908884111561211257600080fd5b938501935b8385101561213057843582529385019390850190612117565b98975050505050505050565b600081518084526020808501945080840160005b8381101561216c57815187529582019590820190600101612150565b509495945050505050565b606080825284519082018190526000906020906080840190828801845b828110156121b95781516001600160a01b031684529284019290840190600101612194565b505050838103828501526121cd818761213c565b91505082810360408401526121e2818561213c565b9695505050505050565b600080604083850312156121ff57600080fd5b61220883611f11565b91506020830135801515811461221d57600080fd5b809150509250929050565b6000806000806080858703121561223e57600080fd5b61224785611f11565b935061225560208601611f11565b925060408501359150606085013567ffffffffffffffff81111561227857600080fd5b8501601f8101871361228957600080fd5b61229887823560208401611ff5565b91505092959194509250565b600080604083850312156122b757600080fd5b6122c083611f11565b91506122ce60208401611f11565b90509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181811c9082168061232057607f821691505b6020821081141561234157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561236f5761236f612347565b500390565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600082198211156123d8576123d8612347565b500190565b600081516123ef818560208601611e8d565b9290920192915050565b600080845481600182811c91508083168061241557607f831692505b602080841082141561243557634e487b7160e01b86526022600452602486fd5b818015612449576001811461245a57612487565b60ff19861689528489019650612487565b60008b81526020902060005b8681101561247f5781548b820152908501908301612466565b505084890196505b5050505050506124ab61249a82866123dd565b64173539b7b760d91b815260050190565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156124de576124de612347565b5060010190565b600083516124f7818460208801611e8d565b83519083019061250b818360208801611e8d565b01949350505050565b634e487b7160e01b600052601260045260246000fd5b60008261253957612539612514565b500490565b60008261254d5761254d612514565b500690565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906121e290830184611eb9565b6000602082840312156125e957600080fd5b8151611b1c81611e5a56fea2646970667358221220bb4bbbb88d338b5d1b37217406bfe025b86778519c84aecc9e5978f98a59ae3364736f6c634300080c00334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c806370a08231116100f7578063a22cb46511610095578063daae8ba211610064578063daae8ba214610541578063dfcdeb7f1461056e578063e985e9c51461059b578063f2fde38b146105e457600080fd5b8063a22cb465146104a9578063b88d4fde146104c9578063bc0ddf47146104e9578063c87b56dd1461052157600080fd5b80638da5cb5b116100d15780638da5cb5b1461043257806390dcbeff1461045057806395d89b4114610470578063a0e67e2b1461048557600080fd5b806370a08231146103dd578063715018a6146103fd57806382b670e41461041257600080fd5b8063248225141161016f57806349db9be11161013e57806349db9be11461035d5780636352211e1461038a578063639d6923146103aa5780636a627842146103ca57600080fd5b806324822514146102e657806339daaee8146102fc57806342842e0e1461031c57806346b45af71461033c57600080fd5b8063081812fc116101ab578063081812fc14610240578063095ea7b3146102785780630f3a1d471461029857806323b872dd146102c657600080fd5b8063017043a5146101d257806301ffc9a7146101e957806306fdde031461021e575b600080fd5b3480156101de57600080fd5b506101e7610604565b005b3480156101f557600080fd5b50610209610204366004611e70565b610646565b60405190151581526020015b60405180910390f35b34801561022a57600080fd5b50610233610698565b6040516102159190611ee5565b34801561024c57600080fd5b5061026061025b366004611ef8565b61072a565b6040516001600160a01b039091168152602001610215565b34801561028457600080fd5b506101e7610293366004611f2d565b6107b2565b3480156102a457600080fd5b506102b86102b3366004611f57565b6108c8565b604051908152602001610215565b3480156102d257600080fd5b506101e76102e1366004611f72565b610947565b3480156102f257600080fd5b506102b860085481565b34801561030857600080fd5b506101e7610317366004611f57565b610978565b34801561032857600080fd5b506101e7610337366004611f72565b6109bf565b34801561034857600080fd5b5060075461020990600160a01b900460ff1681565b34801561036957600080fd5b506102b8610378366004611f57565b600d6020526000908152604090205481565b34801561039657600080fd5b506102606103a5366004611ef8565b6109da565b3480156103b657600080fd5b506101e76103c536600461204d565b610a51565b6101e76103d8366004611f57565b610aa5565b3480156103e957600080fd5b506102b86103f8366004611f57565b610ca1565b34801561040957600080fd5b506101e7610d28565b34801561041e57600080fd5b506101e761042d366004612096565b610d5e565b34801561043e57600080fd5b506007546001600160a01b0316610260565b34801561045c57600080fd5b506102b861046b366004611ef8565b610f51565b34801561047c57600080fd5b50610233610f72565b34801561049157600080fd5b5061049a610f81565b60405161021593929190612177565b3480156104b557600080fd5b506101e76104c43660046121ec565b61112c565b3480156104d557600080fd5b506101e76104e4366004612228565b611137565b3480156104f557600080fd5b50610209610504366004611f57565b6001600160a01b03166000908152600d6020526040902054151590565b34801561052d57600080fd5b5061023361053c366004611ef8565b61116f565b34801561054d57600080fd5b506102b861055c366004611ef8565b600c6020526000908152604090205481565b34801561057a57600080fd5b506102b8610589366004611ef8565b600b6020526000908152604090205481565b3480156105a757600080fd5b506102096105b63660046122a4565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156105f057600080fd5b506101e76105ff366004611f57565b6112e6565b6007546001600160a01b031633146106375760405162461bcd60e51b815260040161062e906122d7565b60405180910390fd5b6007805460ff60a01b19169055565b60006001600160e01b031982166380ac58cd60e01b148061067757506001600160e01b03198216635b5e139f60e01b145b8061069257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546106a79061230c565b80601f01602080910402602001604051908101604052809291908181526020018280546106d39061230c565b80156107205780601f106106f557610100808354040283529160200191610720565b820191906000526020600020905b81548152906001019060200180831161070357829003601f168201915b5050505050905090565b600061073582611381565b6107965760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161062e565b506000908152600460205260409020546001600160a01b031690565b60006107bd826109da565b9050806001600160a01b0316836001600160a01b0316141561082b5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161062e565b336001600160a01b0382161480610847575061084781336105b6565b6108b95760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161062e565b6108c3838361139e565b505050565b6001600160a01b0381166000908152600d60205260408120546109225760405162461bcd60e51b8152602060048201526012602482015271696e76616c696420726563697069656e742160701b604482015260640161062e565b6001600160a01b0382166000908152600d60205260409020546106929060019061235d565b610951338261140c565b61096d5760405162461bcd60e51b815260040161062e90612374565b6108c38383836114f2565b6007546001600160a01b031633146109a25760405162461bcd60e51b815260040161062e906122d7565b6001600160a01b03166000908152600d6020526040902060019055565b6108c383838360405180602001604052806000815250611137565b6000818152600260205260408120546001600160a01b0316806106925760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161062e565b6007546001600160a01b03163314610a7b5760405162461bcd60e51b815260040161062e906122d7565b8051610a8e90600a906020840190611d87565b50506007805460ff60a01b1916600160a01b179055565b600754600160a01b900460ff161515600114610afa5760405162461bcd60e51b81526020600482015260146024820152736d696e74696e67206e6f7420737461727465642160601b604482015260640161062e565b6001600160a01b0381166000908152600d6020526040902054610b5f5760405162461bcd60e51b815260206004820152601a60248201527f726563697069656e74206e6f742077686974656c697374656421000000000000604482015260640161062e565b6000610b6a34611692565b9050600160086000828254610b7f91906123c5565b92505081905550610b9233600854611754565b610bc8600854600a610ba38461176e565b604051602001610bb49291906123f9565b60405160208183030381529060405261186c565b6040516001600160a01b038316903480156108fc02916000818181858888f19350505050158015610bfd573d6000803e3d6000fd5b50600880546000908152600b6020908152604080832085905592548252600c815282822034908190556001600160a01b0386168352600d9091529181208054909190610c4a9084906123c5565b9091555050604080513381526001600160a01b038416602082015234818301526060810183905290517f246d6bee23a8a0c8daf1c72f7696c774498350e7cd91d73644c79f613b1870da9181900360800190a15050565b60006001600160a01b038216610d0c5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161062e565b506001600160a01b031660009081526003602052604090205490565b6007546001600160a01b03163314610d525760405162461bcd60e51b815260040161062e906122d7565b610d5c60006118f7565b565b6007546001600160a01b03163314610d885760405162461bcd60e51b815260040161062e906122d7565b6000815111610dd95760405162461bcd60e51b815260206004820152601d60248201527f6d757374206265206174206c6561737420312070726963652074696572000000604482015260640161062e565b805167ffffffffffffffff811115610df357610df3611fae565b604051908082528060200260200182016040528015610e1c578160200160208202803683370190505b508051610e3191600991602090910190611e0b565b5080600081518110610e4557610e456124b4565b60200260200101516009600081548110610e6157610e616124b4565b60009182526020909120015560015b8151811015610f4d5781610e8560018361235d565b81518110610e9557610e956124b4565b6020026020010151828281518110610eaf57610eaf6124b4565b602002602001015111610f045760405162461bcd60e51b815260206004820152601a60248201527f7072696365207469657273206e6f7420617363656e64696e6721000000000000604482015260640161062e565b818181518110610f1657610f166124b4565b602002602001015160098281548110610f3157610f316124b4565b600091825260209091200155610f46816124ca565b9050610e70565b5050565b60098181548110610f6157600080fd5b600091825260209091200154905081565b6060600180546106a79061230c565b606080606060085467ffffffffffffffff811115610fa157610fa1611fae565b604051908082528060200260200182016040528015610fca578160200160208202803683370190505b50925060085467ffffffffffffffff811115610fe857610fe8611fae565b604051908082528060200260200182016040528015611011578160200160208202803683370190505b50915060085467ffffffffffffffff81111561102f5761102f611fae565b604051908082528060200260200182016040528015611058578160200160208202803683370190505b50905060005b600854811015611126576110766103a58260016123c5565b848281518110611088576110886124b4565b6001600160a01b0390921660209283029190910190910152600b60006110af8360016123c5565b8152602001908152602001600020548382815181106110d0576110d06124b4565b6020908102919091010152600c60006110ea8360016123c5565b81526020019081526020016000205482828151811061110b5761110b6124b4565b602090810291909101015261111f816124ca565b905061105e565b50909192565b610f4d338383611949565b611141338361140c565b61115d5760405162461bcd60e51b815260040161062e90612374565b61116984848484611a18565b50505050565b606061117a82611381565b6111e05760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b606482015260840161062e565b600082815260066020526040812080546111f99061230c565b80601f01602080910402602001604051908101604052809291908181526020018280546112259061230c565b80156112725780601f1061124757610100808354040283529160200191611272565b820191906000526020600020905b81548152906001019060200180831161125557829003601f168201915b50505050509050600061129060408051602081019091526000815290565b90508051600014156112a3575092915050565b8151156112d55780826040516020016112bd9291906124e5565b60405160208183030381529060405292505050919050565b6112de84611a4b565b949350505050565b6007546001600160a01b031633146113105760405162461bcd60e51b815260040161062e906122d7565b6001600160a01b0381166113755760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161062e565b61137e816118f7565b50565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906113d3826109da565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061141782611381565b6114785760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161062e565b6000611483836109da565b9050806001600160a01b0316846001600160a01b031614806114be5750836001600160a01b03166114b38461072a565b6001600160a01b0316145b806112de57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff166112de565b826001600160a01b0316611505826109da565b6001600160a01b03161461156d5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161062e565b6001600160a01b0382166115cf5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161062e565b6115da60008261139e565b6001600160a01b038316600090815260036020526040812080546001929061160390849061235d565b90915550506001600160a01b03821660009081526003602052604081208054600192906116319084906123c5565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600060096000815481106116a8576116a86124b4565b90600052602060002001548210156117025760405162461bcd60e51b815260206004820152601f60248201527f76616c756520736d616c6c6572207468616e206c6f7765737420746965722100604482015260640161062e565b6000805b60095481101561174d5760098181548110611723576117236124b4565b906000526020600020015484101561173a5761174d565b905080611746816124ca565b9050611706565b5092915050565b610f4d828260405180602001604052806000815250611b23565b6060816117925750506040805180820190915260018152600360fc1b602082015290565b8160005b81156117bc57806117a6816124ca565b91506117b59050600a8361252a565b9150611796565b60008167ffffffffffffffff8111156117d7576117d7611fae565b6040519080825280601f01601f191660200182016040528015611801576020820181803683370190505b5090505b84156112de5761181660018361235d565b9150611823600a8661253e565b61182e9060306123c5565b60f81b818381518110611843576118436124b4565b60200101906001600160f81b031916908160001a905350611865600a8661252a565b9450611805565b61187582611381565b6118d85760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b606482015260840161062e565b600082815260066020908152604090912082516108c392840190611d87565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156119ab5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161062e565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611a238484846114f2565b611a2f84848484611b56565b6111695760405162461bcd60e51b815260040161062e90612552565b6060611a5682611381565b611aba5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161062e565b6000611ad160408051602081019091526000815290565b90506000815111611af15760405180602001604052806000815250611b1c565b80611afb8461176e565b604051602001611b0c9291906124e5565b6040516020818303038152906040525b9392505050565b611b2d8383611c54565b611b3a6000848484611b56565b6108c35760405162461bcd60e51b815260040161062e90612552565b60006001600160a01b0384163b15611c4957604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611b9a9033908990889088906004016125a4565b6020604051808303816000875af1925050508015611bd5575060408051601f3d908101601f19168201909252611bd2918101906125d7565b60015b611c2f573d808015611c03576040519150601f19603f3d011682016040523d82523d6000602084013e611c08565b606091505b508051611c275760405162461bcd60e51b815260040161062e90612552565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506112de565b506001949350505050565b6001600160a01b038216611caa5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161062e565b611cb381611381565b15611d005760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161062e565b6001600160a01b0382166000908152600360205260408120805460019290611d299084906123c5565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054611d939061230c565b90600052602060002090601f016020900481019282611db55760008555611dfb565b82601f10611dce57805160ff1916838001178555611dfb565b82800160010185558215611dfb579182015b82811115611dfb578251825591602001919060010190611de0565b50611e07929150611e45565b5090565b828054828255906000526020600020908101928215611dfb5791602002820182811115611dfb578251825591602001919060010190611de0565b5b80821115611e075760008155600101611e46565b6001600160e01b03198116811461137e57600080fd5b600060208284031215611e8257600080fd5b8135611b1c81611e5a565b60005b83811015611ea8578181015183820152602001611e90565b838111156111695750506000910152565b60008151808452611ed1816020860160208601611e8d565b601f01601f19169290920160200192915050565b602081526000611b1c6020830184611eb9565b600060208284031215611f0a57600080fd5b5035919050565b80356001600160a01b0381168114611f2857600080fd5b919050565b60008060408385031215611f4057600080fd5b611f4983611f11565b946020939093013593505050565b600060208284031215611f6957600080fd5b611b1c82611f11565b600080600060608486031215611f8757600080fd5b611f9084611f11565b9250611f9e60208501611f11565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611fed57611fed611fae565b604052919050565b600067ffffffffffffffff83111561200f5761200f611fae565b612022601f8401601f1916602001611fc4565b905082815283838301111561203657600080fd5b828260208301376000602084830101529392505050565b60006020828403121561205f57600080fd5b813567ffffffffffffffff81111561207657600080fd5b8201601f8101841361208757600080fd5b6112de84823560208401611ff5565b600060208083850312156120a957600080fd5b823567ffffffffffffffff808211156120c157600080fd5b818501915085601f8301126120d557600080fd5b8135818111156120e7576120e7611fae565b8060051b91506120f8848301611fc4565b818152918301840191848101908884111561211257600080fd5b938501935b8385101561213057843582529385019390850190612117565b98975050505050505050565b600081518084526020808501945080840160005b8381101561216c57815187529582019590820190600101612150565b509495945050505050565b606080825284519082018190526000906020906080840190828801845b828110156121b95781516001600160a01b031684529284019290840190600101612194565b505050838103828501526121cd818761213c565b91505082810360408401526121e2818561213c565b9695505050505050565b600080604083850312156121ff57600080fd5b61220883611f11565b91506020830135801515811461221d57600080fd5b809150509250929050565b6000806000806080858703121561223e57600080fd5b61224785611f11565b935061225560208601611f11565b925060408501359150606085013567ffffffffffffffff81111561227857600080fd5b8501601f8101871361228957600080fd5b61229887823560208401611ff5565b91505092959194509250565b600080604083850312156122b757600080fd5b6122c083611f11565b91506122ce60208401611f11565b90509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181811c9082168061232057607f821691505b6020821081141561234157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008282101561236f5761236f612347565b500390565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b600082198211156123d8576123d8612347565b500190565b600081516123ef818560208601611e8d565b9290920192915050565b600080845481600182811c91508083168061241557607f831692505b602080841082141561243557634e487b7160e01b86526022600452602486fd5b818015612449576001811461245a57612487565b60ff19861689528489019650612487565b60008b81526020902060005b8681101561247f5781548b820152908501908301612466565b505084890196505b5050505050506124ab61249a82866123dd565b64173539b7b760d91b815260050190565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156124de576124de612347565b5060010190565b600083516124f7818460208801611e8d565b83519083019061250b818360208801611e8d565b01949350505050565b634e487b7160e01b600052601260045260246000fd5b60008261253957612539612514565b500490565b60008261254d5761254d612514565b500690565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906121e290830184611eb9565b6000602082840312156125e957600080fd5b8151611b1c81611e5a56fea2646970667358221220bb4bbbb88d338b5d1b37217406bfe025b86778519c84aecc9e5978f98a59ae3364736f6c634300080c0033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/ATXDAOUkraineNFT.sol:ATXDAOUkraineNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 132,
        "contract": "contracts/ATXDAOUkraineNFT.sol:ATXDAOUkraineNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 136,
        "contract": "contracts/ATXDAOUkraineNFT.sol:ATXDAOUkraineNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 140,
        "contract": "contracts/ATXDAOUkraineNFT.sol:ATXDAOUkraineNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 144,
        "contract": "contracts/ATXDAOUkraineNFT.sol:ATXDAOUkraineNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 150,
        "contract": "contracts/ATXDAOUkraineNFT.sol:ATXDAOUkraineNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1420,
        "contract": "contracts/ATXDAOUkraineNFT.sol:ATXDAOUkraineNFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/ATXDAOUkraineNFT.sol:ATXDAOUkraineNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2167,
        "contract": "contracts/ATXDAOUkraineNFT.sol:ATXDAOUkraineNFT",
        "label": "isMintable",
        "offset": 20,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 2170,
        "contract": "contracts/ATXDAOUkraineNFT.sol:ATXDAOUkraineNFT",
        "label": "_tokenId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2173,
        "contract": "contracts/ATXDAOUkraineNFT.sol:ATXDAOUkraineNFT",
        "label": "priceTiers",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2175,
        "contract": "contracts/ATXDAOUkraineNFT.sol:ATXDAOUkraineNFT",
        "label": "baseURI",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      },
      {
        "astId": 2179,
        "contract": "contracts/ATXDAOUkraineNFT.sol:ATXDAOUkraineNFT",
        "label": "tierMap",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2183,
        "contract": "contracts/ATXDAOUkraineNFT.sol:ATXDAOUkraineNFT",
        "label": "valueMap",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2187,
        "contract": "contracts/ATXDAOUkraineNFT.sol:ATXDAOUkraineNFT",
        "label": "recips",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}